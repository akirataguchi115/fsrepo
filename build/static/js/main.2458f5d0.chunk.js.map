{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","PersonForm","props","onSubmit","addName","value","newName","onChange","handleNameChange","newNumber","handleNumberChange","type","Filter","newFilter","handleFilterChange","Persons","namesToShow","map","person","i","key","name","number","onClick","event","removeName","Notification","message","className","includes","App","useEffect","personService","setPersons","catch","error","console","log","useState","persons","setNewName","setNewNumber","setNewFilter","errorMessage","setErrorMessage","preventDefault","NameObject","date","Date","toISOString","length","x","window","confirm","find","p","changedPerson","returnedPerson","setTimeout","concat","filter","toLowerCase","target","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2458f5d0.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './index.css'\n\nconst PersonForm = (props) => {\n    return (\n        <>\n            <form onSubmit={props.addName}>\n                <div>\n                    name: <input\n                        value={props.newName}\n                        onChange={props.handleNameChange} />\n                </div>\n                <div>\n                    number: <input\n                        value={props.newNumber}\n                        onChange={props.handleNumberChange} />\n                </div>\n                <div>\n                    <button type=\"submit\">add</button>\n                </div>\n            </form>\n        </>\n    )\n}\n\nconst Filter = (props) => {\n    return (\n        <>\n            <form onSubmit={props.addName}>\n                <div>\n                    filter shown with   <input\n                        value={props.newFilter}\n                        onChange={props.handleFilterChange} />\n                </div>\n            </form>\n        </>\n    )\n}\n\nconst Persons = (props) => {\n    return (\n        <>\n            <div>\n                {props.namesToShow.map((person, i) =>\n                    <table key={person.id}>\n                        <tbody >\n                            <tr>\n                                <td>\n                                    <p key={person.name}>{person.name} {person.number}</p>\n                                </td>\n                                <td>\n                                    <button onClick={event => props.removeName(event, person.id, person.name)}>delete</button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                )}\n            </div>\n        </>\n    )\n}\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className={message.includes(\"Information\") ? 'info' : 'error'}>\n            {message}\n        </div>\n    )\n}\n\nconst App = () => {\n    useEffect(() => {\n        personService\n            .getAll()\n            .then(response => {\n                setPersons(response)\n            })\n            .catch(error => {\n                console.log('fail')\n            })\n    }, [])\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [newFilter, setNewFilter] = useState('')\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    const addName = (event) => {\n        event.preventDefault()\n        const NameObject = {\n            name: newName,\n            number: newNumber,\n            date: new Date().toISOString,\n            id: persons.length + 1,\n        }\n        if (persons.map(x => x.name).includes(newName)) {\n            if (window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`)) {\n                const person = persons.find(p => p.name === newName)\n                const changedPerson = { ...person, number: newNumber }\n                personService\n                    .update(person.id, changedPerson).then(returnedPerson => {\n                        setPersons(persons.map(p => p.id !== person.id ? p : changedPerson))\n                        setErrorMessage(`Information: Updated ${newName}`)\n                        setTimeout(() => {\n                            setErrorMessage(null)\n                        }, 5000)\n                        setNewName('')\n                        setNewNumber('')\n                    })\n                    .catch(error => {\n                        setErrorMessage(`Information of ${newName} has already been removed from server`)\n                        setTimeout(() => {\n                            setErrorMessage(null)\n                        }, 5000)\n                    })\n            }\n        } else {\n            personService\n                .create(NameObject)\n                .then(response => {\n                    setPersons(persons.concat(response))\n                    setNewName('')\n                    setNewNumber('')\n                    setErrorMessage(`Information: Added ${newName}`)\n                    setTimeout(() => {\n                        setErrorMessage(null)\n                    }, 5000)\n                })\n                .catch(error => {\n                    setErrorMessage(error.response.data.error)\n                })\n        }\n    }\n\n    const removeName = (event, id, name) => {\n        event.preventDefault()\n        if (window.confirm(`Delete ${name}?`)) {\n            personService\n                .remove(id)\n                .then(response => {\n                    setPersons(persons.filter((item => item.id !== id)))\n                })\n        }\n        setErrorMessage(`Information: Deleted ${name}`)\n        setTimeout(() => {\n            setErrorMessage(null)\n        }, 5000)\n    }\n\n    const handleNameChange = (event) => {\n        setNewName(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        setNewNumber(event.target.value)\n    }\n\n    const handleFilterChange = (event) => {\n        setNewFilter(event.target.value)\n    }\n\n    const namesToShow = persons.filter(person => person.name\n        .toLowerCase()\n        .includes(newFilter.toLowerCase()))\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={errorMessage} />\n            <Filter addName={addName} newFilter={newFilter}\n                handleFilterChange={handleFilterChange} />\n            <h3>add a new</h3>\n            <PersonForm addName={addName} newName={newName}\n                handleNameChange={handleNameChange} newNumber={newNumber}\n                handleNumberChange={handleNumberChange} />\n            <h3>Numbers</h3>\n            <Persons namesToShow={namesToShow} removeName={removeName} />\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n)"],"sourceRoot":""}